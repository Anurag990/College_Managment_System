package com.codingshuttle.tutorial.dataMapping.CollegeManagmentSystem.services;import com.codingshuttle.tutorial.dataMapping.CollegeManagmentSystem.entites.Professor;import com.codingshuttle.tutorial.dataMapping.CollegeManagmentSystem.entites.Student;import com.codingshuttle.tutorial.dataMapping.CollegeManagmentSystem.entites.Subject;import com.codingshuttle.tutorial.dataMapping.CollegeManagmentSystem.repositories.ProfessorRepo;import com.codingshuttle.tutorial.dataMapping.CollegeManagmentSystem.repositories.StudentRepo;import com.codingshuttle.tutorial.dataMapping.CollegeManagmentSystem.repositories.SubjectRepo;import org.springframework.stereotype.Service;import java.util.Optional;@Servicepublic class ProfessorService {    private  final ProfessorRepo professorRepo;    private final SubjectRepo subjectRepo;    private final StudentRepo studentRepo;    public ProfessorService(ProfessorRepo professorRepo,SubjectRepo subjectRepo,StudentRepo studentRepo)    {        this.professorRepo = professorRepo;        this.subjectRepo = subjectRepo;        this.studentRepo = studentRepo;    }    public Professor createNewProfessor(Professor professor) {        return professorRepo.save(professor);    }    public Professor getProfessorById(Long professorId) {        return professorRepo.findById(professorId).orElse(null);    }    public Professor assignSubjectToProfessor(Long subjectId, Long professorId) {        Optional<Subject> subject = subjectRepo.findById(subjectId);        Optional<Professor> professor = professorRepo.findById(professorId);        if (subject.isPresent() && professor.isPresent()) {            Subject subjectEntity = subject.get();            Professor professorEntity = professor.get();            subjectEntity.setProfessor(professorEntity);            subjectRepo.save(subjectEntity);            professorEntity.getSubjects().add(subjectEntity);            return professorRepo.save(professorEntity); // Save to ensure persistence        } else {            return null;        }    }    public Professor assignStudentToProfessor(Long studentId, Long professorId) {        Optional<Student> student = studentRepo.findById(studentId);        Optional<Professor> professor = professorRepo.findById(professorId);        if(student.isPresent() && professor.isPresent())        {            Student studentEntity = student.get();            Professor professorEntity = professor.get();            studentEntity.getProfessors().add(professorEntity);            professorEntity.getStudents().add(studentEntity);            studentRepo.save(studentEntity);            return professorRepo.save(professorEntity);        }        else        {            return  null;        }    }}